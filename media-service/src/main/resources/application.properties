server.port=0
spring.application.name=media-service

spring.datasource.url=jdbc:postgresql://ep-twilight-meadow-a1fpbo99-pooler.ap-southeast-1.aws.neon.tech/media_db?sslmode=require
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
#eureka.instance.hostname=localhost

cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api_key=${CLOUDINARY_API_KEY}
cloudinary.api_secret=${CLOUDINARY_API_SECRET}

spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=4MB
spring.servlet.multipart.max-request-size=4MB

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always


spring.kafka.bootstrap-servers=localhost:9092,localhost:9093,localhost:9094
kafka.topic.upload-events=upload-events

spring.kafka.consumer.group-id=media-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.max.poll.records=100
spring.kafka.listener.concurrency=5
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.spring.json.type.mapping=filemessage:org.dainn.mediaservice.event.FileMessage

spring.kafka.consumer.properties.partition.assignment.strategy=org.apache.kafka.clients.consumer.RoundRobinAssignor

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.retries=3
spring.kafka.producer.acks=all