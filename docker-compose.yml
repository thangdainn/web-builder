#version: '3.8'
services:
  postgres-agency:
    container_name: postgres-agency
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: agency_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-agency:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d agency_db -p 5431" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-media:
    container_name: postgres-media
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: media_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-media:/data/postgres
    expose:
      - "5432"
    ports:
      - "5432:5432"
    command: -p 5432
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d media_db -p 5432" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-notification:
    container_name: postgres-notification
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-notification:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d notification_db -p 5433" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-pipeline:
    container_name: postgres-pipeline
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pipeline_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-pipeline:/data/postgres
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d pipeline_db -p 5434" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-user:
    container_name: postgres-user
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-user:/data/postgres
    expose:
      - "5436"
    ports:
      - "5436:5436"
    command: -p 5436
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d user_db -p 5436" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-funnel:
    container_name: postgres-funnel
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: funnel_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-funnel:/data/postgres
    expose:
      - "5437"
    ports:
      - "5437:5437"
    command: -p 5437
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d funnel_db -p 5437" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  postgres-subscription:
    container_name: postgres-subscription
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: subscription_db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - ./postgres-subscription:/data/postgres
    expose:
      - "5438"
    ports:
      - "5438:5438"
    command: -p 5438
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d subscription_db -p 5438" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  redis:
    container_name: redis-wb
    image: redis:7.2-alpine
    command: --requirepass ${REDIS_PASSWORD}
    expose:
      - "6379"
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.3
    container_name: zookeeper-wb
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 512M
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  broker-1:
    image: confluentinc/cp-kafka:7.6.3
    container_name: broker-1-wb
    ports:
      - "9092:9092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-wb:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1-wb:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
    restart: on-failure
    healthcheck:
      test: nc -z broker-1-wb 29092 || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  broker-2:
    image: confluentinc/cp-kafka:7.6.3
    container_name: broker-2-wb
    ports:
      - "9093:9093"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-wb:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-2-wb:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 2
    restart: on-failure
    healthcheck:
      test: nc -z broker-2-wb 29093 || exit 1
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 45s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.4
    container_name: elasticsearch-wb
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1512M
    healthcheck:
      test: curl -s http://localhost:9200/_cluster/health | grep -q 'status":"green\|status":"yellow'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  discovery-server:
    image: thanngdainn/discovery-server:${SERVICE_VERSION}
    container_name: discovery-server-wb
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8761/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  api-gateway:
    image: thanngdainn/api-gateway:${SERVICE_VERSION}
    container_name: api-gateway-wb
    pull_policy: always
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - LOGGING_LEVEL_ROOT=INFO
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=${CLERK_ISSUE_URI}
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=${CLERK_JWK_SET_URI}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      discovery-server:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  agency-service:
    container_name: agency-service-wb
    image: thanngdainn/agency-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-agency:5431/agency_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres-agency:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/agency-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  funnel-service:
    container_name: funnel-service-wb
    image: thanngdainn/funnel-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres-funnel:5437/funnel_db
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-funnel:5437/funnel_db
      - SPRING_FLYWAY_USER=${POSTGRES_USER}
      - SPRING_FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      postgres-funnel:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/funnel-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  media-service:
    container_name: media-service-wb
    image: thanngdainn/media-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-media:5432/media_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY}
      - AWS_S3_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      postgres-media:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/media-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  notification-service:
    container_name: notification-service-wb
    image: thanngdainn/notification-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres-notification:5433/notification_db
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-notification:5433/notification_db
      - SPRING_FLYWAY_USER=${POSTGRES_USER}
      - SPRING_FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - RESEND_API_KEY=${RESEND_API_KEY}
      - RESEND_API_MAIL=${RESEND_API_MAIL}
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      postgres-notification:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/notification-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  payment-service:
    container_name: payment-service-wb
    image: thanngdainn/payment-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLIC_KEY=${STRIPE_PUBLIC_KEY}
      - WEB_HOOK_SECRET_KEY=${WEBHOOK_SECRET_KEY}
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/payment-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  pipeline-service:
    container_name: pipeline-service-wb
    image: thanngdainn/pipeline-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-pipeline:5434/pipeline_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      postgres-pipeline:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/pipeline-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  search-service:
    container_name: search-service-wb
    image: thanngdainn/search-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_ELASTICSEARCH_URIS=http://elasticsearch-wb:9200
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/search-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  subscription-service:
    container_name: subscription-service-wb
    image: thanngdainn/subscription-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres-subscription:5438/subscription_db
      - SPRING_R2DBC_USERNAME=${POSTGRES_USER}
      - SPRING_R2DBC_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-subscription:5438/subscription_db
      - SPRING_FLYWAY_USER=${POSTGRES_USER}
      - SPRING_FLYWAY_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      postgres-subscription:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/subscription-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

  user-service:
    container_name: user-service-wb
    image: thanngdainn/user-service:${SERVICE_VERSION}
    pull_policy: always
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5436/user_db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server-wb:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker-1-wb:29092,broker-2-wb:29093
      - BETTERSTACK_SOURCE_TOKEN=${BETTER_STACK_TOKEN}
      - BETTERSTACK_HOST=${BETTER_STACK_HOST}
      - APP_DOMAIN=${APP_DOMAIN}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOGGING_LEVEL_ROOT=WARN
    depends_on:
      postgres-user:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      api-gateway:
        condition: service_healthy
      broker-1:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: on-failure
    healthcheck:
      test: curl -f http://localhost:8080/user-service/actuator/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "11m"
        max-file: "3"
    networks:
      - wb-network

  vector:
    image: timberio/vector:latest-alpine
    container_name: vector-wb
    volumes:
      - ./vector:/etc/vector
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - BETTER_STACK_HOST=${BETTER_STACK_HOST}
      - BETTER_STACK_TOKEN=${BETTER_STACK_TOKEN}
      - VECTOR_CONFIG=/etc/vector/vector.yml
      - VECTOR_LOG=debug
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - wb-network

volumes:
  elasticsearch-data:
    driver: local

networks:
  wb-network:
    driver: bridge